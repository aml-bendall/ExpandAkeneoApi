<?php

namespace Proxies\__CG__\Akeneo\Bundle\BatchBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class JobExecution extends \Akeneo\Bundle\BatchBundle\Entity\JobExecution implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'id', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'stepExecutions', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'jobInstance', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'pid', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'user', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'status', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'startTime', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'endTime', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'createTime', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'updatedTime', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'executionContext', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'exitStatus', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'exitCode', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'exitDescription', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'failureExceptions', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'logFile');
        }

        return array('__isInitialized__', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'id', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'stepExecutions', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'jobInstance', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'pid', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'user', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'status', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'startTime', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'endTime', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'createTime', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'updatedTime', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'executionContext', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'exitStatus', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'exitCode', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'exitDescription', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'failureExceptions', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\JobExecution' . "\0" . 'logFile');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (JobExecution $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getExecutionContext()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExecutionContext', array());

        return parent::getExecutionContext();
    }

    /**
     * {@inheritDoc}
     */
    public function setExecutionContext(\Akeneo\Bundle\BatchBundle\Item\ExecutionContext $executionContext)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExecutionContext', array($executionContext));

        return parent::setExecutionContext($executionContext);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndTime', array());

        return parent::getEndTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndTime(\DateTime $endTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndTime', array($endTime));

        return parent::setEndTime($endTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getStartTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartTime', array());

        return parent::getStartTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartTime(\DateTime $startTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartTime', array($startTime));

        return parent::setStartTime($startTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreateTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreateTime', array());

        return parent::getCreateTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreateTime(\DateTime $createTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreateTime', array($createTime));

        return parent::setCreateTime($createTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedTime', array());

        return parent::getUpdatedTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedTime(\DateTime $updatedTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedTime', array($updatedTime));

        return parent::setUpdatedTime($updatedTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getPid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPid', array());

        return parent::getPid();
    }

    /**
     * {@inheritDoc}
     */
    public function setPid($pid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPid', array($pid));

        return parent::setPid($pid);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus(\Akeneo\Bundle\BatchBundle\Job\BatchStatus $status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function upgradeStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'upgradeStatus', array($status));

        return parent::upgradeStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function setExitStatus(\Akeneo\Bundle\BatchBundle\Job\ExitStatus $exitStatus)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExitStatus', array($exitStatus));

        return parent::setExitStatus($exitStatus);
    }

    /**
     * {@inheritDoc}
     */
    public function getExitStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExitStatus', array());

        return parent::getExitStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function getStepExecutions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStepExecutions', array());

        return parent::getStepExecutions();
    }

    /**
     * {@inheritDoc}
     */
    public function createStepExecution($stepName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createStepExecution', array($stepName));

        return parent::createStepExecution($stepName);
    }

    /**
     * {@inheritDoc}
     */
    public function addStepExecution(\Akeneo\Bundle\BatchBundle\Entity\StepExecution $stepExecution)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addStepExecution', array($stepExecution));

        return parent::addStepExecution($stepExecution);
    }

    /**
     * {@inheritDoc}
     */
    public function isRunning()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isRunning', array());

        return parent::isRunning();
    }

    /**
     * {@inheritDoc}
     */
    public function isStopping()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isStopping', array());

        return parent::isStopping();
    }

    /**
     * {@inheritDoc}
     */
    public function stop()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'stop', array());

        return parent::stop();
    }

    /**
     * {@inheritDoc}
     */
    public function getFailureExceptions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFailureExceptions', array());

        return parent::getFailureExceptions();
    }

    /**
     * {@inheritDoc}
     */
    public function addFailureException(\Exception $e)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addFailureException', array($e));

        return parent::addFailureException($e);
    }

    /**
     * {@inheritDoc}
     */
    public function getAllFailureExceptions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllFailureExceptions', array());

        return parent::getAllFailureExceptions();
    }

    /**
     * {@inheritDoc}
     */
    public function setJobInstance(\Akeneo\Bundle\BatchBundle\Entity\JobInstance $jobInstance)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJobInstance', array($jobInstance));

        return parent::setJobInstance($jobInstance);
    }

    /**
     * {@inheritDoc}
     */
    public function getJobInstance()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJobInstance', array());

        return parent::getJobInstance();
    }

    /**
     * {@inheritDoc}
     */
    public function getLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabel', array());

        return parent::getLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogFile($logFile)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogFile', array($logFile));

        return parent::setLogFile($logFile);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogFile', array());

        return parent::getLogFile();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

}

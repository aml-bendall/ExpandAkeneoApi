<?php

namespace Proxies\__CG__\Pim\Bundle\CatalogBundle\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Product extends \Pim\Bundle\CatalogBundle\Model\Product implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * {@inheritDoc}
     * @param string $name
     */
    public function __get($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', array($name));

        return parent::__get($name);
    }



    /**
     * {@inheritDoc}
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', array($name));

        return parent::__isset($name);

    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'created', 'updated', 'locale', 'scope', 'values', 'indexedValues', 'indexedValuesOutdated', 'family', 'familyId', 'categories', 'categoryIds', 'enabled', 'groups', 'groupIds', 'associations', 'completenesses', 'normalizedData');
        }

        return array('__isInitialized__', 'id', 'created', 'updated', 'locale', 'scope', 'values', 'indexedValues', 'indexedValuesOutdated', 'family', 'familyId', 'categories', 'categoryIds', 'enabled', 'groups', 'groupIds', 'associations', 'completenesses', 'normalizedData');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Product $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', array());

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', array($created));

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdated', array());

        return parent::getUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdated($updated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdated', array($updated));

        return parent::setUpdated($updated);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocale', array());

        return parent::getLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocale', array($locale));

        return parent::setLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getScope()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getScope', array());

        return parent::getScope();
    }

    /**
     * {@inheritDoc}
     */
    public function setScope($scope)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setScope', array($scope));

        return parent::setScope($scope);
    }

    /**
     * {@inheritDoc}
     */
    public function addValue(\Pim\Bundle\CatalogBundle\Model\ProductValueInterface $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addValue', array($value));

        return parent::addValue($value);
    }

    /**
     * {@inheritDoc}
     */
    public function removeValue(\Pim\Bundle\CatalogBundle\Model\ProductValueInterface $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeValue', array($value));

        return parent::removeValue($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsedAttributeCodes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsedAttributeCodes', array());

        return parent::getUsedAttributeCodes();
    }

    /**
     * {@inheritDoc}
     */
    public function markIndexedValuesOutdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'markIndexedValuesOutdated', array());

        return parent::markIndexedValuesOutdated();
    }

    /**
     * {@inheritDoc}
     */
    public function getValue($attributeCode, $localeCode = NULL, $scopeCode = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValue', array($attributeCode, $localeCode, $scopeCode));

        return parent::getValue($attributeCode, $localeCode, $scopeCode);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAttribute(\Pim\Bundle\CatalogBundle\Model\AttributeInterface $attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAttribute', array($attribute));

        return parent::hasAttribute($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function getFamily()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFamily', array());

        return parent::getFamily();
    }

    /**
     * {@inheritDoc}
     */
    public function setFamily(\Pim\Bundle\CatalogBundle\Model\FamilyInterface $family = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFamily', array($family));

        return parent::setFamily($family);
    }

    /**
     * {@inheritDoc}
     */
    public function setFamilyId($familyId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFamilyId', array($familyId));

        return parent::setFamilyId($familyId);
    }

    /**
     * {@inheritDoc}
     */
    public function getFamilyId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFamilyId', array());

        return parent::getFamilyId();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdentifier', array());

        return parent::getIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributes', array());

        return parent::getAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getValues()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValues', array());

        return parent::getValues();
    }

    /**
     * {@inheritDoc}
     */
    public function getOrderedGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrderedGroups', array());

        return parent::getOrderedGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function getLabel($locale = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabel', array($locale));

        return parent::getLabel($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategories', array());

        return parent::getCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function addCategory(\Akeneo\Component\Classification\Model\CategoryInterface $category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCategory', array($category));

        return parent::addCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCategory(\Akeneo\Component\Classification\Model\CategoryInterface $category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCategory', array($category));

        return parent::removeCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategoryCodes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategoryCodes', array());

        return parent::getCategoryCodes();
    }

    /**
     * {@inheritDoc}
     */
    public function getGroupCodes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroupCodes', array());

        return parent::getGroupCodes();
    }

    /**
     * {@inheritDoc}
     */
    public function isEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEnabled', array());

        return parent::isEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', array($enabled));

        return parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAttributeInFamily(\Pim\Bundle\CatalogBundle\Model\AttributeInterface $attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAttributeInFamily', array($attribute));

        return parent::hasAttributeInFamily($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAttributeInVariantGroup(\Pim\Bundle\CatalogBundle\Model\AttributeInterface $attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAttributeInVariantGroup', array($attribute));

        return parent::hasAttributeInVariantGroup($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function isAttributeRemovable(\Pim\Bundle\CatalogBundle\Model\AttributeInterface $attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAttributeRemovable', array($attribute));

        return parent::isAttributeRemovable($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function isAttributeEditable(\Pim\Bundle\CatalogBundle\Model\AttributeInterface $attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAttributeEditable', array($attribute));

        return parent::isAttributeEditable($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function getGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroups', array());

        return parent::getGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function addGroup(\Pim\Bundle\CatalogBundle\Model\GroupInterface $group)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addGroup', array($group));

        return parent::addGroup($group);
    }

    /**
     * {@inheritDoc}
     */
    public function removeGroup(\Pim\Bundle\CatalogBundle\Model\GroupInterface $group)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeGroup', array($group));

        return parent::removeGroup($group);
    }

    /**
     * {@inheritDoc}
     */
    public function getVariantGroup()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVariantGroup', array());

        return parent::getVariantGroup();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getMedia()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMedia', array());

        return parent::getMedia();
    }

    /**
     * {@inheritDoc}
     */
    public function addAssociation(\Pim\Bundle\CatalogBundle\Model\AssociationInterface $association)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAssociation', array($association));

        return parent::addAssociation($association);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAssociation(\Pim\Bundle\CatalogBundle\Model\AssociationInterface $association)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAssociation', array($association));

        return parent::removeAssociation($association);
    }

    /**
     * {@inheritDoc}
     */
    public function getAssociations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssociations', array());

        return parent::getAssociations();
    }

    /**
     * {@inheritDoc}
     */
    public function getAssociationForType(\Pim\Bundle\CatalogBundle\Model\AssociationTypeInterface $type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssociationForType', array($type));

        return parent::getAssociationForType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getAssociationForTypeCode($typeCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssociationForTypeCode', array($typeCode));

        return parent::getAssociationForTypeCode($typeCode);
    }

    /**
     * {@inheritDoc}
     */
    public function setAssociations(array $associations = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAssociations', array($associations));

        return parent::setAssociations($associations);
    }

    /**
     * {@inheritDoc}
     */
    public function setCompletenesses(\Doctrine\Common\Collections\ArrayCollection $completenesses)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompletenesses', array($completenesses));

        return parent::setCompletenesses($completenesses);
    }

    /**
     * {@inheritDoc}
     */
    public function getCompletenesses()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompletenesses', array());

        return parent::getCompletenesses();
    }

    /**
     * {@inheritDoc}
     */
    public function getReference()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReference', array());

        return parent::getReference();
    }

    /**
     * {@inheritDoc}
     */
    public function setNormalizedData($normalizedData)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNormalizedData', array($normalizedData));

        return parent::setNormalizedData($normalizedData);
    }

}
